generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  lastSignIn    DateTime?
  lastSignOut   DateTime?
  loginCount    Int            @default(0)
  accounts      Account[]
  sessions      Session[]
  userTokens    UserTokens?
  viewedVideos  ViewedVideos[]

  @@map("users")
}

model UserTokens {
  id            String @id @default(cuid())
  userId        String @unique
  tokensUsed    Int    @default(0)
  lastResetHour Int    @default(0)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model ViewedVideos {
  id       String   @id @default(cuid())
  userId   String
  videoId  String
  viewedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@map("viewed_videos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
